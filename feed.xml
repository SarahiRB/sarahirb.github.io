<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.4">Jekyll</generator><link href="https://sarahirb.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://sarahirb.github.io/" rel="alternate" type="text/html" hreflang="en"/><updated>2025-01-31T23:02:14+00:00</updated><id>https://sarahirb.github.io/feed.xml</id><title type="html">blank</title><subtitle>A personal website </subtitle><entry><title type="html">high dimensions ruining the fun</title><link href="https://sarahirb.github.io/blog/2025/high-dimensions/" rel="alternate" type="text/html" title="high dimensions ruining the fun"/><published>2025-01-31T16:29:00+00:00</published><updated>2025-01-31T16:29:00+00:00</updated><id>https://sarahirb.github.io/blog/2025/high-dimensions</id><content type="html" xml:base="https://sarahirb.github.io/blog/2025/high-dimensions/"><![CDATA[<p>Well, here’s a square with a circle inside.</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <img src="/assets/img/square-circle.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <img src="/assets/img/square-circle-points.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption"> This is a 2-dimensional space, if you were fill it with 20 points most of them would land inside the circle. </div> <p>Now here’s a cube with a sphere inside.</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <img src="/assets/img/cube-sphere.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <img src="/assets/img/cube-sphere-points.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption"> A 3-dimensional space. And most of the points would land inside the sphere, it's pretty much the same as before. </div> <p>But what happens as we keep increasing the dimensions? Will it still be the same?</p> <p>Well… apparently, no.</p> <h3 id="sooo-what-happens">Sooo…. What happens?</h3> <h4 id="to-the-sphere">to the sphere</h4> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <img src="/assets/img/volume-hyper-sphere.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption"> This gives you the volume of a sphere given a dimension (d). Actually, it should be called an "hypersphere" as a generalization. </div> <p>Here’s the thing: the denominator increases faster than the numerator for higher and higher values of d (i.e., the volume shrinks as d increases).</p> <h4 id="to-the-cube">to the cube</h4> <p>Its volume remains unchanged (it was 1 when it was a 3D cube, and it’ll still be 1 when it becomes a 100D cube).</p> <p>But its vertices? The number of them skyrocket with higher dimensions.</p> <h3 id="and-what-does-it-mean">And what does it mean?</h3> <p>In the previous example, almost all the random points were inside the circle/sphere.</p> <p>In higher dimensions (e.g., 1000D), the volume of the hypersphere almost vanishes, meaning the points will be clustered around the corners. And there are <em>lots</em> of them (2^1000 in a 1000D space).</p> <p>Before, if those points represented two or three different classes (imagine them as colors), and you wanted to classify a new point (i.e., determine its color based on nearby points), it was easy—just look at the surrounding points and assign the most common class (color).</p> <p>But in higher dimensions, all the points are in the corners and roughly equidistant from each other, so that trick no longer works.</p> <p><em>Basically, that’s why k-NN struggles with high-dimensional data.</em></p>]]></content><author><name></name></author><category term="ML"/><category term="math"/><category term="images"/><category term="intuitive"/><summary type="html"><![CDATA[In high dimensions they won't hear ya scream.]]></summary></entry></feed>